    // Iterators.

private:
    template <class ReferenceType, class Container>
    class IteratorBase
    {
    public:
        typedef value_type value_type;
        typedef difference_type difference_type;
        typedef ReferenceType reference;
        typedef std::random_access_iterator_tag category;

        IteratorBase()
            : move(nullptr)
            , index(0)
        {}

        IteratorBase(const IteratorBase&) = default;
        IteratorBase& operator =(const IteratorBase&) = default;

        bool operator ==(const IteratorBase& iter) const
        {
            return move == iter.move && index == iter.index;
        }
        bool operator !=(const IteratorBase& iter) const
        {
            return move != iter.move || index != iter.index;
        }

        reference operator *()
        {
            return move->at(index);
        }
        
        IteratorBase& operator ++()
        {
            ++index;
            return *this;
        }
        IteratorBase operator ++(int)
        {
            IteratorBase copy{*this};
            ++index;
            return copy;
        }
        IteratorBase& operator --()
        {
            --index;
            return *this;
        }
        IteratorBase operator --(int)
        {
            IteratorBase copy{*this};
            --index;
            return copy;
        }

        IteratorBase operator +(difference_type x) const
        {
            return IteratorBase(move, index + x);
        }
        static IteratorBase operator +(difference_type x, const IteratorBase& iter)
        {
            return IteratorBase(iter.move, x + iter.index);
        }
        IteratorBase operator -(difference_type) const
        {
            
        }
        difference_type operator -(const IteratorBase&) const;
        
        bool operator <(const IteratorBase&) const;
        bool operator <=(const IteratorBase&) const;
        bool operator >(const IteratorBase&) const;
        bool operator >=(const IteratorBase&) const;
        
        IteratorBase& operator +=(difference_type);
        IteratorBase& operator -=(difference_type);
        
        reference operator [](difference_type);

    private:
        IteratorBase(Container* move, int index);
        void validate() const
        {
            Q_ASSERT();
        }

        Container* move;
        size_t index;

        friend Move;
    };

public:
    typedef IteratorBase<reference, Move> Iterator;
    typedef IteratorBase<const_reference, const Move> ConstIterator;

    iterator begin();
    iterator end();

    const_iterator begin() const;
    const_iterator end() const;
    const_iterator cbegin() const;
    const_iterator cend() const;